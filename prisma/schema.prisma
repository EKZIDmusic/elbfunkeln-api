generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env(" SHADOW_DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  password         String
  firstName        String?
  lastName         String?
  phone            String?
  role             UserRole       @default(CUSTOMER)
  isVerified       Boolean        @default(false)
  isBanned         Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  displayName      String?
  lastLogin        DateTime?
  status           UserStatus     @default(active)
  twoFactorEnabled Boolean        @default(false)
  addresses        Address[]
  cart             Cart?
  favorites        Favorite[]
  orders           Order[]
  reviews          Review[]
  tickets          Ticket[]
  activities       UserActivity[]
  sessions         UserSession[]

  @@map("users")
}

model Product {
  id               String         @id @default(uuid())
  name             String
  description      String         @db.Text
  price            Decimal        @db.Decimal(10, 2)
  discountPrice    Decimal?       @db.Decimal(10, 2)
  sku              String         @unique
  stock            Int            @default(0)
  isActive         Boolean        @default(true)
  isFeatured       Boolean        @default(false)
  categoryId       String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  giftboxavailable Boolean        @default(false)
  deletedAt        DateTime?
  isDeleted        Boolean        @default(false)
  cartItems        CartItem[]
  favorites        Favorite[]
  orderItems       OrderItem[]
  images           ProductImage[]
  category         Category       @relation(fields: [categoryId], references: [id])
  reviews          Review[]

  @@index([categoryId], map: "products_categoryId_fkey")
  @@map("products")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]

  @@index([parentId], map: "categories_parentId_fkey")
  @@map("categories")
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String?
  data      Bytes?   @db.LongBlob
  mimeType  String?
  alt       String?
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "product_images_productId_fkey")
  @@map("product_images")
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  firstName String
  lastName  String
  street    String
  city      String
  state     String?
  zip       String
  country   String   @default("DE")
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([userId], map: "addresses_userId_fkey")
  @@map("addresses")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([productId], map: "cart_items_productId_fkey")
  @@map("cart_items")
}

model Order {
  id              String         @id @default(uuid())
  orderNumber     String         @unique
  userId          String
  addressId       String
  status          OrderStatus    @default(PENDING)
  paymentStatus   PaymentStatus  @default(PENDING)
  shippingStatus  ShippingStatus @default(PENDING)
  subtotal        Decimal        @db.Decimal(10, 2)
  tax             Decimal        @db.Decimal(10, 2)
  shipping        Decimal        @db.Decimal(10, 2)
  discount        Decimal        @default(0.00) @db.Decimal(10, 2)
  total           Decimal        @db.Decimal(10, 2)
  notes           String?        @db.Text
  trackingNumber  String?
  stripePaymentId String?
  discountCode    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  items           OrderItem[]
  address         Address        @relation(fields: [addressId], references: [id])
  user            User           @relation(fields: [userId], references: [id])

  @@index([addressId], map: "orders_addressId_fkey")
  @@index([userId], map: "orders_userId_fkey")
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "order_items_orderId_fkey")
  @@index([productId], map: "order_items_productId_fkey")
  @@map("order_items")
}

model GiftCard {
  id          String    @id @default(uuid())
  code        String    @unique
  amount      Decimal   @db.Decimal(10, 2)
  balance     Decimal   @db.Decimal(10, 2)
  purchasedBy String?
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  usedAt      DateTime?

  @@map("gift_cards")
}

model Discount {
  id          String    @id @default(uuid())
  code        String    @unique
  description String?
  type        String
  value       Decimal   @db.Decimal(10, 2)
  minAmount   Decimal?  @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int       @default(0)
  isActive    Boolean   @default(true)
  startsAt    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  @@map("discounts")
}

model Ticket {
  id         String          @id @default(uuid())
  userId     String
  subject    String
  status     TicketStatus    @default(OPEN)
  priority   TicketPriority  @default(MEDIUM)
  assignedTo String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  messages   TicketMessage[]
  user       User            @relation(fields: [userId], references: [id])

  @@index([userId], map: "tickets_userId_fkey")
  @@map("tickets")
}

model TicketMessage {
  id        String   @id @default(uuid())
  ticketId  String
  content   String   @db.Text
  isStaff   Boolean  @default(false)
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId], map: "ticket_messages_ticketId_fkey")
  @@map("ticket_messages")
}

model Newsletter {
  id          String   @id @default(uuid())
  email       String   @unique
  isActive    Boolean  @default(true)
  preferences String?  @db.LongText
  createdAt   DateTime @default(now())

  @@map("newsletter_subscribers")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId], map: "favorites_productId_fkey")
  @@map("favorites")
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  rating     Int
  comment    String?  @db.Text
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([productId], map: "reviews_productId_fkey")
  @@map("reviews")
}

model Analytics {
  id        String   @id @default(uuid())
  event     String
  data      String   @db.LongText
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("analytics")
}

model UserSession {
  id          String   @id @default(uuid())
  userId      String
  deviceName  String?
  deviceType  String?
  browserName String?
  ipAddress   String?
  userAgent   String?  @db.Text
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime @default(now())
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_sessions")
}

model UserActivity {
  id          String   @id @default(uuid())
  userId      String
  actionType  String
  description String?
  ipAddress   String?
  userAgent   String?  @db.Text
  success     Boolean  @default(true)
  metadata    String?  @db.LongText
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("user_activities")
}

model ContactInquiry {
  id        String        @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String        @db.Text
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([status, createdAt])
  @@map("contact_inquiries")
}

enum UserRole {
  CUSTOMER
  SHOP_OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ShippingStatus {
  PENDING
  LABEL_CREATED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}

enum UserStatus {
  active
  inactive
  banned
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}
