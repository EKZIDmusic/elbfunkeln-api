generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env(" SHADOW_DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  SHOP_OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ShippingStatus {
  PENDING
  LABEL_CREATED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  firstName  String?
  lastName   String?
  phone      String?
  role       UserRole @default(CUSTOMER)
  isVerified Boolean  @default(false)
  isBanned   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders    Order[]
  addresses Address[]
  favorites Favorite[]
  tickets   Ticket[]
  cart      Cart?
  reviews   Review[]

  @@map("users")
}

model Product {
  id               String   @id @default(uuid())
  name             String
  description      String   @db.Text
  price            Decimal  @db.Decimal(10, 2)
  discountPrice    Decimal? @db.Decimal(10, 2)
  sku              String   @unique
  stock            Int      @default(0)
  isActive         Boolean  @default(true)
  isFeatured       Boolean  @default(false)
  giftboxavailable Boolean  @default(false)
  categoryId       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  category   Category       @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  favorites  Favorite[]
  reviews    Review[]

  @@map("products")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  parentId    String?
  createdAt   DateTime @default(now())

  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]

  @@map("categories")
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  firstName String
  lastName  String
  street    String
  city      String
  state     String?
  zip       String
  country   String   @default("DE")
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id              String         @id @default(uuid())
  orderNumber     String         @unique
  userId          String
  addressId       String
  status          OrderStatus    @default(PENDING)
  paymentStatus   PaymentStatus  @default(PENDING)
  shippingStatus  ShippingStatus @default(PENDING)
  subtotal        Decimal        @db.Decimal(10, 2)
  tax             Decimal        @db.Decimal(10, 2)
  shipping        Decimal        @db.Decimal(10, 2)
  discount        Decimal        @default(0) @db.Decimal(10, 2)
  total           Decimal        @db.Decimal(10, 2)
  notes           String?        @db.Text
  trackingNumber  String?
  stripePaymentId String?
  discountCode    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model GiftCard {
  id          String    @id @default(uuid())
  code        String    @unique
  amount      Decimal   @db.Decimal(10, 2)
  balance     Decimal   @db.Decimal(10, 2)
  purchasedBy String?
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  usedAt      DateTime?

  @@map("gift_cards")
}

model Discount {
  id          String    @id @default(uuid())
  code        String    @unique
  description String?
  type        String
  value       Decimal   @db.Decimal(10, 2)
  minAmount   Decimal?  @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int       @default(0)
  isActive    Boolean   @default(true)
  startsAt    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  @@map("discounts")
}

model Ticket {
  id         String         @id @default(uuid())
  userId     String
  subject    String
  status     TicketStatus   @default(OPEN)
  priority   TicketPriority @default(MEDIUM)
  assignedTo String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  user     User            @relation(fields: [userId], references: [id])
  messages TicketMessage[]

  @@map("tickets")
}

model TicketMessage {
  id        String   @id @default(uuid())
  ticketId  String
  content   String   @db.Text
  isStaff   Boolean  @default(false)
  createdAt DateTime @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_messages")
}

model Newsletter {
  id          String   @id @default(uuid())
  email       String   @unique
  isActive    Boolean  @default(true)
  preferences Json?
  createdAt   DateTime @default(now())

  @@map("newsletter_subscribers")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  rating     Int
  comment    String?  @db.Text
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Analytics {
  id        String   @id @default(uuid())
  event     String
  data      Json
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("analytics")
}
